//-----------------------------------------------------------------------
// <copyright file="NotMatcherTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using NMocha;
using NMock2.Matchers;
using NUnit.Framework;

namespace NMock2.Test.Matchers {
    [TestFixture]
    public class NotMatcherTest {
        private static readonly object ignored = new object();
        private static readonly Matcher TRUE = new AlwaysMatcher(true, "TRUE");
        private static readonly Matcher FALSE = new AlwaysMatcher(false, "FALSE");

        [Test]
        public void CalculatesTheLogicalNegationOfAMatcher() {
            Assert.IsTrue(new NotMatcher(FALSE).Matches(ignored), "not false");
            Assert.IsFalse(new NotMatcher(TRUE).Matches(ignored), "not true");
        }

        [Test]
        public void CanUseOperatorOverloadingAsSyntacticSugar() {
            Assert.IsTrue((!FALSE).Matches(ignored), "not false");
            Assert.IsFalse((!TRUE).Matches(ignored), "not true");
        }

        [Test]
        public void HasAReadableDescription() {
            Matcher negated = new MatcherWithDescription("<negated>");
            var notMatcher = new NotMatcher(negated);
            AssertDescription.IsComposed(notMatcher, "not {0}", negated);
        }
    }
}