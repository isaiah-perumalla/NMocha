//-----------------------------------------------------------------------
// <copyright file="MethodInfoStub.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Globalization;
using System.Reflection;

namespace NMock2.Test.Monitoring {
    public class MethodInfoStub : MethodInfo {
        private readonly string name;
        private readonly ParameterInfo[] parameters;
        public Type StubReturnType = typeof (object);

        public MethodInfoStub(string name, params ParameterInfo[] parameters) {
            this.name = name;
            this.parameters = parameters;
        }

        public override string Name {
            get { return name; }
        }

        public override Type DeclaringType {
            get { throw new NotImplementedException(); }
        }

        public override RuntimeMethodHandle MethodHandle {
            get { throw new NotImplementedException(); }
        }

        public override Type ReturnType {
            get { return StubReturnType; }
        }

        public override ICustomAttributeProvider ReturnTypeCustomAttributes {
            get { throw new NotImplementedException(); }
        }

        public override MethodAttributes Attributes {
            get { return MethodAttributes.ReuseSlot; }
        }

        public override Type ReflectedType {
            get { throw new NotImplementedException(); }
        }

        public override object[] GetCustomAttributes(bool inherit) {
            throw new NotImplementedException();
        }

        public override object[] GetCustomAttributes(Type attributeType, bool inherit) {
            throw new NotImplementedException();
        }

        public override bool IsDefined(Type attributeType, bool inherit) {
            throw new NotImplementedException();
        }

        public override ParameterInfo[] GetParameters() {
            return parameters;
        }

        public override MethodImplAttributes GetMethodImplementationFlags() {
            throw new NotImplementedException();
        }

        public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters,
                                      CultureInfo culture) {
            throw new NotImplementedException();
        }

        public override MethodInfo GetBaseDefinition() {
            throw new NotImplementedException();
        }
    }
}