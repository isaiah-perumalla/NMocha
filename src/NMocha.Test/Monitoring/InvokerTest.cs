//-----------------------------------------------------------------------
// <copyright file="InvokerTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using System.Reflection;
using NMocha.Monitoring;
using NMocha.Test.Monitoring;
using NMock2.Monitoring;
using NUnit.Framework;

namespace NMock2.Test.Monitoring {
    [TestFixture]
    public class InvokerTest {
        #region Setup/Teardown

        [SetUp]
        public void SetUp() {
            receiver = new object();
            target = new MockFoo();
            next = new MockInvokable();
            invoker = new Invoker(typeof (IFoo), target, next);
        }

        #endregion

        public interface IFoo {
            void Foo();
        }

        public interface IOther {
            void Other();
        }

        public class MockFoo : IFoo {
            public bool FooWasInvoked;

            #region IFoo Members

            public void Foo() {
                FooWasInvoked = true;
            }

            #endregion
        }

        public static readonly MethodInfo FOO_METHOD = typeof (IFoo).GetMethod("Foo");
        public static readonly MethodInfo OTHER_METHOD = typeof (IOther).GetMethod("Other");


        private object receiver;
        private MockFoo target;
        private MockInvokable next;
        private Invoker invoker;

        [Test]
        public void ForwardsInvocationsToNextIfMethodIsNotDeclaredInSpecifiedType() {
            var invocation = new Invocation(receiver, OTHER_METHOD, new object[0]);

            next.Expected = invocation;

            invoker.Invoke(invocation);

            Assert.IsFalse(target.FooWasInvoked, "should not have invoked method on target");
            Assert.AreSame(invocation, next.Actual, "should have passed invocation to next in chain");
        }

        [Test]
        public void InvokesMethodOnObjectIfMethodIsDeclaredInSpecifiedType() {
            var invocation = new Invocation(receiver, FOO_METHOD, new object[0]);

            invoker.Invoke(invocation);

            Assert.IsTrue(target.FooWasInvoked, "Foo should have been invoked on target");
        }
    }
}