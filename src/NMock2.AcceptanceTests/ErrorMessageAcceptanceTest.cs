//-----------------------------------------------------------------------
// <copyright file="ErrorMessageDemo.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using NMocha.Internal;
using NUnit.Framework;

namespace NMock2.AcceptanceTests {
    [TestFixture]
    public class ErrorMessageAcceptanceTest : AcceptanceTestBase {

     
        [Test]
        public void ShowExpectedAndCurrentNumberOfCallsInErrorMessage() {
            SkipVerificationForThisTest();
            var speaker = Mockery.NewInstanceOfRole<ISpeaker>();
            Expect.Once.On(speaker).Message("Hello");
            Expect.Once.On(speaker).Message("Umm");
            Expect.AtLeastOnce.On(speaker).Message("Err");

            speaker.Umm();
            speaker.Err();
            
            try
            {
                Mockery.VerifyAllExpectationsHaveBeenMet();
            }
            catch(ExpectationException e)
            {
                const string expectedMessage = @"not all expected invocations were performed
expectations:
  expected once, never invoked: speaker.Hello(any arguments)
  expected once, already invoked 1 time: speaker.Umm(any arguments)
  expected atleast once, already invoked 1 time: speaker.Err(any arguments)
";
                Console.WriteLine(e.Message);

                Assert.AreEqual(e.Message, (expectedMessage));
            }
        }
        
        
        [Test]
        public void ErrorMessageHasExpectedNeverWhenInvocation() {
            SkipVerificationForThisTest();
            var speaker = Mockery.NewInstanceOfRole<ISpeaker>();
            Expect.Never.On(speaker).Message("Hello");
            try
            {
                speaker.Hello();
            }
            catch(ExpectationException e)
            {
                const string expectedMessage = @"unexpected invocation of speaker.Hello()
expectations:
  expected never: speaker.Hello(any arguments)
";
                Console.WriteLine(e.Message);

                Assert.AreEqual(e.Message, (expectedMessage));
            }
        }

        [Test]
        public void ShowsInformationOfStubbedCalls() {
            SkipVerificationForThisTest();
            var speaker = Mockery.NewInstanceOfRole<ISpeaker>();
            Stub.On(speaker).Message("Hello");
            Expect.AtLeastOnce.On(speaker).Message("Err");
            try
            {
                speaker.Hello();
                Mockery.VerifyAllExpectationsHaveBeenMet();
            }
            catch (ExpectationException e)
            {
                const string expectedMessage =
                    @"not all expected invocations were performed
expectations:
  allowed, already invoked 1 time: speaker.Hello(any arguments)
  expected atleast once, never invoked: speaker.Err(any arguments)
";
                Console.WriteLine(e.Message);

                Assert.AreEqual(e.Message, expectedMessage);

            }

        }

        [Test]
        public void WhenUnexpectedInvocationShowExpectedAndCurrentNumberOfCallsInErrorMessage() {
            SkipVerificationForThisTest();
            var speaker = Mockery.NewInstanceOfRole<ISpeaker>();
            Expect.Once.On(speaker).Message("Hello");
            Expect.AtLeastOnce.On(speaker).Message("Err");
            try
            {
                speaker.Umm();
            }
            catch (ExpectationException e)
            {
                const string expectedMessage =
                    @"unexpected invocation of speaker.Umm()
expectations:
  expected once, never invoked: speaker.Hello(any arguments)
  expected atleast once, never invoked: speaker.Err(any arguments)
";
                Console.WriteLine(e.Message);

                Assert.AreEqual(e.Message, expectedMessage);

            }
        }
    }
}