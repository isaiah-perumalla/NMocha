//-----------------------------------------------------------------------
// <copyright file="ArgumentMatchingAcceptanceTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using NMock2.Matchers;
using NUnit.Framework;

namespace NMock2.AcceptanceTests {
    [TestFixture]
    public class ArgumentMatchingAcceptanceTest : AcceptanceTestBase {
        public interface IDemanding {
            void Take(int foo, int bar, int baz);
        }

        [Test]
        public void CanMixMatcherAndNonMatcherExpectedArguments() {
            var demanding = (IDemanding) Mocks.NewInstanceOfRole(typeof (IDemanding));

            Expect.Once.On(demanding).Message("Take").With(1, 2, 3);
            Expect.Once.On(demanding).Message("Take").With(Is.EqualTo(10), Is.AtLeast(11), Is.AtMost(12));
            Expect.Once.On(demanding).Message("Take").With(20, Is.AtLeast(19), 22);

            demanding.Take(1, 2, 3);
            demanding.Take(10, 11, 12);
            demanding.Take(20, 21, 22);
        }

        /// <summary>
        /// Generic matcher can be used either with <c>new GenericMatcher</c> or with <c>Is.Match</c>.
        /// </summary>
        [Test]
        public void GenericMatcher() {
            var demanding = (IDemanding) Mocks.NewInstanceOfRole(typeof (IDemanding));

            Expect.Once.On(demanding).Message("Take").With(
                new GenericMatcher<int>(parameter => parameter == 10),
                Is.Match<int>(parameter => parameter == 20),
                Is.Anything);

            demanding.Take(10, 20, 42);
        }
    }
}