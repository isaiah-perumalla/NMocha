//-----------------------------------------------------------------------
// <copyright file="ExpectationsAcceptanceTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using NMock2.Internal;
using NUnit.Framework;

namespace NMock2.AcceptanceTests {
    [TestFixture]
    public class ExpectationsAcceptanceTest : AcceptanceTestBase {
        private const int N = 2;
        private const int M = 4;

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedAtLeastNTimesButCalledLessThanNTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtLeast(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N - 1; i++) speaker.Hello();

            Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedAtMostNTimesAndCalledMoreThanNTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtMost(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N + 1; i++) speaker.Hello();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedBetweenNAndMTimesAndCalledMoreThanMTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Between(N, M).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < M; i++) speaker.Hello();
            speaker.Hello();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedBetweenNAndMTimesButCalledLessThanNTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Between(N, M).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N - 1; i++) speaker.Hello();

            Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedOnceButCalledTwice() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Once.On(speaker).Message("Hello").WithNoArguments();

            speaker.Hello();
            speaker.Hello();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodExpectedOnceButNotCalled() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Once.On(speaker).Message("Hello").WithNoArguments();

            Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodNeverExpectedIsActuallyCalled() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Never.On(speaker).Message("Hello").WithNoArguments();

            speaker.Hello();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void FailsTestIfMethodNeverExpectedIsCalled() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Never.On(speaker).Message("Hello").WithNoArguments();

            speaker.Hello();
        }

        [Test]
        [Ignore("Feature for future release: mock hashcode.")]
        public void MockHash() {
            var speaker = Mockery.NewInstanceOfRole<ISpeaker>();

            int i = speaker.GetHashCode();

            Assert.AreEqual(33650554, i);
        }

        [Test]
        public void MockToString() {
            var speaker = Mockery.NewNamedInstanceOfRole<ISpeaker>("text");

            string s = speaker.ToString();

            Assert.AreEqual("text", s);
        }

        [Test]
        public void PassesTestIfMethodExpectedAtLeastNTimesAndCalledMoreThanNTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtLeast(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N + 1; i++) speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodExpectedAtLeastNTimesAndCalledNTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtLeast(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N; i++) speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodExpectedAtMostNTimesAndCalledLessThanNTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtMost(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N - 1; i++) speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodExpectedAtMostNTimesAndCalledNTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.AtMost(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N; i++) speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodExpectedBetweenNAndMTimesAndCalledBetweenNAndMTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Between(N, M).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < (N + M)/2; i++) speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodExpectedOnceAndCalled() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Once.On(speaker).Message("Hello").WithNoArguments();

            speaker.Hello();
        }

        [Test]
        public void PassesTestIfMethodNeverExpectedIsNeverCalled() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.Never.On(speaker).Message("Hello").WithNoArguments();
        }

        [Test]
        public void PassesTestIfMethodUsesDefaultExpectation() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));

            Expect.On(speaker).Message("Hello").WithNoArguments();

            speaker.Hello();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void TestShouldFailIfExpectedExactlyNTimesAndCalledLessThanNTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));
            Expect.Exactly(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N - 1; i++) speaker.Hello();

            Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test, ExpectedException(typeof (ExpectationException))]
        public void TestShouldFailIfExpectedExactlyNTimesAndCalledMoreThanNTimes() {
            SkipVerificationForThisTest();

            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));
            Expect.Exactly(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N + 1; i++) speaker.Hello();

            Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test]
        public void TestShouldPassIfExpectedExactlyNTimesAndCalledNTimes() {
            var speaker = (ISpeaker) Mockery.NewInstanceOfRole(typeof (ISpeaker));
            Expect.Exactly(N).On(speaker).Message("Hello").WithNoArguments();

            for (int i = 0; i < N; i++) speaker.Hello();
        }
    }
}