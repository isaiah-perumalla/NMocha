//-----------------------------------------------------------------------
// <copyright file="CommentAcceptanceTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using NMock2.Internal;
using NUnit.Framework;

namespace NMock2.AcceptanceTests {
    [TestFixture]
    public class CommentTest : AcceptanceTestBase {
        #region Setup/Teardown

        public override void Setup() {
            base.Setup();

            mock = Mockery.NewInstanceOfRole<IComment>();
        }

        public override void Teardown() {
            VerifyException();
        }

        #endregion

        private const string comment = "Should be called because it is a test.";

        private IComment mock;

        private void VerifyException() {
            try
            {
                Mockery.VerifyAllExpectationsHaveBeenMet();

                Assert.Fail("An ExpectationException should occur.");
            }
            catch (ExpectationException e)
            {
                Assert.IsTrue(e.Message.Contains(comment), e.Message + " does not contain comment: " + comment);
            }
        }

        [Test]
        public void GetProperty() {
            Expect.Once.On(mock).GetProperty("Property").Will(Return.Value("test")).Comment(comment);
        }

        [Test]
        public void IndexerGet() {
            Expect.Once.On(mock).Get[0].Comment(comment);
        }

        [Test]
        public void IndexerSet() {
            Expect.Once.On(mock).Set[0].To("test").Comment(comment);
        }

        [Test]
        public void Method() {
            Expect.Once.On(mock).Message("Method").Comment(comment);
        }

        [Test]
        public void MethodWithActions() {
            Expect.Once.On(mock).Message("Method").Will(Throw.Exception(new Exception())).Comment(comment);
        }

        [Test]
        public void SetProperty() {
            Expect.Once.On(mock).SetProperty("Property").To("test").Comment(comment);
        }
    }

    public interface IComment {
        string Property { get; set; }

        string this[int index] { get; set; }
        void Method();

        event EventHandler Event;
    }
}