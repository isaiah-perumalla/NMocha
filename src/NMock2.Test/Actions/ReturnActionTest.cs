//-----------------------------------------------------------------------
// <copyright file="ReturnActionTest.cs" company="NMock2">
//
//   http://www.sourceforge.net/projects/NMock2
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
// This is the easiest way to ignore StyleCop rules on this file, even if we shouldn't use this tag:
// <auto-generated />
//-----------------------------------------------------------------------using NUnit.Framework;
namespace NMock2.Test.Actions
{
    using NMock2.Actions;
    using NMock2.Monitoring;
    using NMock2.Test.Monitoring;
    using NUnit.Framework;

    [TestFixture]
    public class ReturnActionTest
    {
        [Test]
        public void SetsReturnValueOfInvocation()
        {
            object result = new NamedObject("result");
            ReturnAction action = new ReturnAction(result);

            Assert.AreSame( result, ResultOfAction(action), "result" );
        }

        [Test]
        public void HasAReadableDescription()
        {
            object result = new NamedObject("result");
            ReturnAction action = new ReturnAction(result);

            AssertDescription.IsEqual(action, "return <result>");
        }

        public static object ResultOfAction(IAction action)
        {
            object receiver = new NamedObject("receiver");
            MethodInfoStub methodInfo = new MethodInfoStub("method");
            Invocation invocation = new Invocation(receiver, methodInfo, new object[0]);
    
            action.Invoke(invocation);

            return invocation.Result;
        }
    }
}
